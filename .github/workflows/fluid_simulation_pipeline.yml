name: Fluid Data Processing and Commit

on:
  push:
    branches:
      - "**"  # Triggers on any branch
  workflow_dispatch: # Allows manual trigger from GitHub Actions UI

jobs:
  process_fluid_data:
    runs-on: ubuntu-latest # GitHub Actions provides an Ubuntu virtual machine

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Action to clone your repository

      # --- Blender Setup ---
      # Crucial step: Download and extract a portable Blender version for bpy script execution.
      - name: Download and Extract Blender
        id: setup-blender # Assign an ID to this step to reference its outputs
        run: |
          # Use a stable Blender LTS (Long Term Support) version, e.g., 3.6.10
          # Check https://download.blender.org/release/ for available versions
          BLENDER_VERSION="3.6.10"
          BLENDER_FILE="blender-${BLENDER_VERSION}-linux-x64.tar.xz"
          BLENDER_URL="https://download.blender.org/release/Blender${BLENDER_VERSION%.*}/${BLENDER_FILE}"
          
          echo "Downloading Blender from: ${BLENDER_URL}"
          wget -q ${BLENDER_URL} # -q for quiet output
          tar -xf ${BLENDER_FILE} # Extract the tar.xz archive
          
          # Output the path to the extracted Blender directory for later steps
          # This creates an environment variable BLENDER_DIR accessible via steps.setup-blender.outputs.BLENDER_DIR
          echo "BLENDER_DIR=$(pwd)/blender-${BLENDER_VERSION}-linux-x64" >> "$GITHUB_OUTPUT"
          echo "Blender extracted to: $(pwd)/blender-${BLENDER_VERSION}-linux-x64"

      - name: Install Python dependencies for Blender
        # Our Python script uses `numpy`. Blender's Python needs to have it installed.
        run: |
          # Get the path to Blender's embedded Python interpreter from the previous step's output
          # Note: Blender 3.6.x uses Python 3.10
          BLENDER_PYTHON="${{ steps.setup-blender.outputs.BLENDER_DIR }}/python/bin/python3.10"
          echo "Installing numpy into Blender's Python: ${BLENDER_PYTHON}"
          ${BLENDER_PYTHON} -m ensurepip --default-pip # Ensure pip is available for Blender's Python
          ${BLENDER_PYTHON} -m pip install numpy

      # --- General Python Dependencies (for other scripts/tests, not directly for the Blender script itself) ---
      # This step uses the system's default Python, not Blender's embedded one.
      - name: Set up Python for other scripts (if needed)
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Can be different from Blender's Python version

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libtbb-dev # Keep if other parts of your pipeline require TBB

      - name: Install base Python dependencies
        run: |
          # numpy is already installed for Blender's Python, so removed it from here.
          pip install --upgrade h5py scipy pytest # Keep if needed by your test suite or other scripts
          pip install -r requirements.txt # Install dependencies from your requirements.txt

      - name: Debug Repository Structure
        run: ls -R "$GITHUB_WORKSPACE"

      - name: Verify Blender Scene Assembly Script Exists
        # Updated script name
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/generate_blender_format.py" ]; then
            echo "❌ Error: generate_blender_format.py not found in src directory!"
            exit 1
          fi

      - name: Run script to assemble final Blender scene
        # This is where we execute our Python script using the downloaded Blender executable.
        run: |
          BLENDER_EXEC="${{ steps.setup-blender.outputs.BLENDER_DIR }}/blender"
          PYTHON_SCRIPT="$GITHUB_WORKSPACE/src/generate_blender_format.py"
          echo "Running Blender script: ${PYTHON_SCRIPT} using ${BLENDER_EXEC}"
          # --background runs Blender without a GUI, --python executes the script
          ${BLENDER_EXEC} --background --python "${PYTHON_SCRIPT}"

      # ✅ Execute Unit & Integration Tests After Blender Assembly
      # Ensure your pytest commands can locate the generated .blend file for validation.
      # These tests will use the Python setup from 'Set up Python for other scripts'.
      - name: Run unit tests
        run: pytest tests/test_input_validation.py --verbose

      - name: Run output validation tests
        run: pytest tests/test_output_validation.py --verbose

      - name: Run integration tests
        run: pytest tests/test_conversion_pipeline.py --verbose

      - name: Run Blender import tests
        run: pytest tests/test_blender_import_validation.py --verbose

      - name: Run advanced Blender validation tests
        run: pytest tests/test_blender_advanced_validation.py --verbose

      - name: Commit and Push Final Blender Assembly Output to Repository
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }} # Ensure these are set as GitHub Secrets
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          cd "$GITHUB_WORKSPACE" # Change to the repository root

          # Updated output file path to match our Python script
          OUTPUT_BLEND_FILE="data/testing-input-output/output/final_animation_scene.blend"

          if [ -f "${OUTPUT_BLEND_FILE}" ]; then
            git add "${OUTPUT_BLEND_FILE}" # Stage the generated .blend file
            git status # Show current git status for debugging

            # Check if there are actual changes staged to avoid empty commits
            if [[ $(git diff --cached --quiet; echo $?) -ne 0 ]]; then
              git commit -m "Auto-update: Final Blender scene assembly completed"
              git push origin HEAD # Push changes to the current branch
            else
              echo "✅ No changes to commit!"
            fi
          else
            echo "❌ No Blender output file detected at ${OUTPUT_BLEND_FILE}, skipping commit."
          fi
